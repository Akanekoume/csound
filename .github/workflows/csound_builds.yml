name: csound_builds

env:
  VCPKG_BINARY_SOURCES: "clear;nuget,GitHub,readwrite"
  CSOUND_VERSION: 6.17.0
  CSOUND_MANUAL_VERSION: 6.16.0

on:
  push:
    branches:
      - develop
      - master
  pull_request:
    branches:
      - develop

jobs:
  linux_build:
    name: Linux/Ubuntu build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v1
        with:
          fetch-depth: 1
          submodules: true
      - name: Bootstrap VCPKG
        run: ./vcpkg/bootstrap-vcpkg.sh
      - name: Install Dependencies
        run: sudo apt-get update && sudo apt-get install -y cmake default-jdk bison flex
      - name: Configure build
        run: cmake -B build -S . -DUSE_VCPKG=1
      - name: Build Csound
        run: cmake --build build
      - name: Run tests
        run: cmake --build build --target csdtests

  macos_build:
    name: MacOS build
    runs-on: macos-latest
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - name: Install Dependencies
        run: brew install cmake swig eigen asio libsndfile portaudio portmidi libsamplerate liblo jack openjdk hdf5 gettext fluid-synth fltk stk wiiuse
      - name: Configure build
        run: mkdir build && cd build && cmake ..
      - name: Build Csound
        run: cd build && make
      - name: Run tests
        run: cd build && make test csdtests

  emscripten_build:
    name: EMscripten build
    runs-on: ubuntu-latest
    steps:
      - name: run the Docker image
        run: docker run --name csound_test_run -i sjamble/csound_emscripten
      - name: copying build out of container
        run: docker cp csound_test_run:/csound/Emscripten/csound-web-6.17.0.zip .
      - uses: actions/upload-artifact@v2
        with:
          name: csound-web-6.17.0.zip
          path: .

  android_build:
    name: Android build
    runs-on: ubuntu-latest
    steps:
      - name: run the Docker image
        run: docker run --name csound_test_run -i sjamble/csound_android
      - name: copying build out of container
        run: docker cp csound_test_run:/csound/Android/csound-android-6.17.0.zip .
      - uses: actions/upload-artifact@v2
        with:
          name: csound-android-6.17.0.zip
          path: .

  windows_build:
    name: Windows build
    runs-on: windows-latest
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v1
        with:
          fetch-depth: 1
          submodules: true
      - name: Install system dependencies
        run: |
          choco install swig -y --version=4.0.1 --allow-downgrade
          choco install winflexbison -y
      - name: Bootstrap VCPKG
        run: .\vcpkg\bootstrap-vcpkg.bat
      - name: Setup NuGet Credentials
        shell: bash
        run: >
          `./vcpkg/vcpkg fetch nuget | tail -n 1`
          sources add
          -source "https://nuget.pkg.github.com/csound/index.json"
          -storepasswordincleartext
          -name "GitHub"
          -username "csound"
          -password "${{ secrets.GITHUB_TOKEN }}"
      - name: Configure build
        run: cmake -B build -S . -DUSE_VCPKG=1 -DCUSTOM_CMAKE="./platform/windows/Custom-vs.cmake"
      - name: Build Csound
        run: cmake --build build --config Release
      - name: Run tests
        run: cmake --build build --target csdtests
      - name: Acquire Csound manual
        shell: powershell
        run: |
          Invoke-WebRequest -Uri "https://github.com/csound/manual/releases/download/6.16.0/Csound6.16.0_manual_html.zip" -OutFile "./manual.zip"
          7z x manual.zip
      - name: Build installer
        shell: powershell
        run: |
          $Env:RedistVersion=Get-Content "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\Microsoft.VCRedistVersion.default.txt"
          $Env:VCREDIST_CRT_DIR="C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Redist\MSVC\${Env:RedistVersion}\x64\Microsoft.VC142.CRT"
          $Env:VCREDIST_CXXAMP_DIR="C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Redist\MSVC\${Env:RedistVersion}\x64\Microsoft.VC142.CXXAMP"
          $Env:VCREDIST_OPENMP_DIR="C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Redist\MSVC\${Env:RedistVersion}\x64\Microsoft.VC142.OpenMP"
          iscc /o. installer\\windows\\csound6_x64_github.iss
          7z a csound-windows_x86_64-${{env.CSOUND_VERSION}}-${GITHUB_RUN_ID}.zip ${Env:GITHUB_WORKSPACE}\build\Release\*.exe ${Env:GITHUB_WORKSPACE}\build\Release\csound64.lib ${Env:GITHUB_WORKSPACE}\build\include\ ${Env:GITHUB_WORKSPACE}\build\Release\*.dll ${Env:GITHUB_WORKSPACE}\build\Release\*.pyd ${Env:GITHUB_WORKSPACE}\build\*.jar ${Env:GITHUB_WORKSPACE}\build\*.py
          7z l csound-windows_x86_64-${{env.CSOUND_VERSION}}-${GITHUB_RUN_ID}.zip
      - uses: actions/upload-artifact@v2
        with:
          name: ^csound-windows_|(?:\.exe)$
          path: .
      - uses: actions/upload-artifact@v2
        with:
          name: csound-windows_x86_64-*.zip
          path: .
# jobs:
#   build:
#     strategy:
#       matrix:
#         include:
#           - name: Linux (Ubuntu latest)
#             os: ubuntu-latest
#             # install_dir: ~/libKeyFinder
#             # cmake_extras: -DCMAKE_BUILD_TYPE=RelWithDebInfo

#           - name: macOS (latest)
#             os: macos-latest
#             # install_dir: ~/libKeyFinder
#             # cmake_extras: -DCMAKE_BUILD_TYPE=RelWithDebInfo

#           - name: Windows (latest)
#             os: windows-latest
#             install_dir: C:\libKeyFinder
#             cmake_extras: >-
#               -DVCPKG_TARGET_TRIPLET=x64-windows-static
#               -DCMAKE_TOOLCHAIN_FILE=C:\vcpkg\scripts\buildsystems\vcpkg.cmake
#             cmake_config: --config RelWithDebInfo
#             ctest_config: --build-config RelWithDebInfo

