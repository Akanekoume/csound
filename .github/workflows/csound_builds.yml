name: csound_builds

env:
  VCPKG_BINARY_SOURCES: "clear;nuget,GitHub,readwrite"
  CSOUND_VERSION: 6.17.0
  CSOUND_MANUAL_VERSION: 6.16.0

on:
  push:
    branches:
      - develop
      - master
  pull_request:
    branches:
      - develop

jobs:
  linux_build:
    name: Linux/Ubuntu build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - name: Install Dependencies
        run: sudo apt-get update && sudo apt-get install cmake libsndfile1-dev libasound2-dev libjack-dev portaudio19-dev libportmidi-dev libpulse-dev swig liblua5.1-0-dev default-jdk libfltk1.1-dev libfluidsynth-dev liblo-dev fluid ladspa-sdk libpng-dev dssi-dev libstk0-dev libgmm++-dev bison flex libportsmf-dev libeigen3-dev libcunit1-dev
      - name: Configure build
        run: mkdir build && cd build && cmake ..
      - name: Build Csound
        run: cd build && make
      - name: Run tests
        run: cd build && make test csdtests

  macos_build:
    name: MacOS build
    runs-on: macos-latest
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - name: Install Dependencies
        run: brew install cmake swig eigen asio libsndfile portaudio portmidi libsamplerate liblo jack openjdk hdf5 gettext fluid-synth fltk stk wiiuse
      - name: Configure build
        run: mkdir build && cd build && cmake ..
      - name: Build Csound
        run: cd build && make
      - name: Run tests
        run: cd build && make test csdtests

  emscripten_build:
    name: EMscripten build
    runs-on: ubuntu-latest
    steps:
      - name: run the Docker image
        run: docker run --name csound_test_run -i sjamble/csound_emscripten
      - name: copying build out of container
        run: docker cp csound_test_run:/csound/Emscripten/csound-web-6.17.0.zip .
      - uses: actions/upload-artifact@v2
        with:
          name: csound-web-6.17.0.zip
          path: .

  android_build:
    name: Android build
    runs-on: ubuntu-latest
    steps:
      - name: run the Docker image
        run: docker run --name csound_test_run -i sjamble/csound_android
      - name: copying build out of container
        run: docker cp csound_test_run:/csound/Android/csound-android-6.17.0.zip .
      - uses: actions/upload-artifact@v2
        with:
          name: csound-android-6.17.0.zip
          path: .

  windows_build:
    name: Windows build
    runs-on: windows-latest
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v1
        with:
          fetch-depth: 1
          submodules: true
      - name: Install system dependencies
        run: |
          choco install swig -y --version=4.0.1 --allow-downgrade
          choco install winflexbison -y
      - name: Bootstrap VCPKG
        run: .\vcpkg\bootstrap-vcpkg.bat
      - name: Setup NuGet Credentials
        shell: bash
        run: >
          `./vcpkg/vcpkg fetch nuget | tail -n 1`
          sources add
          -source "https://nuget.pkg.github.com/csound/index.json"
          -storepasswordincleartext
          -name "GitHub"
          -username "csound"
          -password "${{ secrets.GITHUB_TOKEN }}"
      - name: Configure build
        run: cmake -B build -S . -DUSE_VCPKG=1 -DCUSTOM_CMAKE="./platform/windows/Custom-vs.cmake"
      - name: Build Csound
        run: cmake --build build
      - name: Run tests
        run: cmake --build build --target csdtests
      - name: Acquire Csound manual
        uses: dawidd6/action-download-artifact@v2
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          workflow: manual_build.yml
          branch: master
          name: Csound6.16.0_manual_html.zip
          path: C:/
          repo: https://github.com/csound/manual
      - name: Build installer
        run: |
          iscc /dVcpkgInstallDir=%VCPKGDir%\\installed\\x64-windows-csound /omsvc installer\\windows\\csound6_x64_appveyor.iss
          7z a csound-windows_x86_64-${{env.CSOUND_VERSION}}-${{env.GITHUB_RUN_ID}}.zip %GITHUB_WORKSPACE%\msvc\csound-vs\Release\*.exe %GITHUB_WORKSPACE%\msvc\csound-vs\Release\csound64.lib %GITHUB_WORKSPACE%\include\ %GITHUB_WORKSPACE%\msvc\csound-vs\Release\*.dll %GITHUB_WORKSPACE%\msvc\csound-vs\Release\*.pyd %GITHUB_WORKSPACE%\msvc\csound-vs\*.jar %GITHUB_WORKSPACE%\msvc\csound-vs\*.py
          7z l csound-windows_x86_64-${{env.CSOUND_VERSION}}-${{env.GITHUB_RUN_ID}}.zip

# jobs:
#   build:
#     strategy:
#       matrix:
#         include:
#           - name: Linux (Ubuntu latest)
#             os: ubuntu-latest
#             # install_dir: ~/libKeyFinder
#             # cmake_extras: -DCMAKE_BUILD_TYPE=RelWithDebInfo

#           - name: macOS (latest)
#             os: macos-latest
#             # install_dir: ~/libKeyFinder
#             # cmake_extras: -DCMAKE_BUILD_TYPE=RelWithDebInfo

#           - name: Windows (latest)
#             os: windows-latest
#             install_dir: C:\libKeyFinder
#             cmake_extras: >-
#               -DVCPKG_TARGET_TRIPLET=x64-windows-static
#               -DCMAKE_TOOLCHAIN_FILE=C:\vcpkg\scripts\buildsystems\vcpkg.cmake
#             cmake_config: --config RelWithDebInfo
#             ctest_config: --build-config RelWithDebInfo

